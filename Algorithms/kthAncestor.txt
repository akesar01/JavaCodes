// kth parent of a node
// Using Binary Lifting
class TreeAncestor {
    private static int log =0;
    private static int up[][];
    // private static int log;
    private static int lvl[];
    private static List<Integer> graph[];
    public TreeAncestor(int n, int[] parent) {
       while((1<<log)<n)
       {
       	log++;
       }
       up = new int [n][log];
       lvl = new int[n];
       graph = new ArrayList[n+1];
       for(int i=0;i<n;i++)
       {
       	graph[i] = new ArrayList<>();
       }
       parent[0]=0;
       for(int i=0;i<n;i++)
       {
       	graph[i].add(parent[i]);
       	graph[parent[i]].add(i);
       }

       dfs(0,0);


        
        
        
        
    }
    private static void dfs(int start,int p)
    {
    	up[start][0] = p;
    	for(int i=1;i<log;i++)
    	{
    		up[start][i] = up[up[start][i-1]][i-1];
    	}
    	for(int i: graph[start])
    	{
    		if(i!= p)
    		{
    			lvl[i] = lvl[start]+1;
    			dfs(i,start);
    		}
    	}
    }
    
    public int getKthAncestor(int node, int k) {
        if(lvl[node]<k) return -1;
        
        for(int i=0;i<=log;i++)
        {
            if((1&(k>>i))==1)
            {
                node = up[node][i];
               
            }
             // k >>=1;
        }
        return node;
    }
}

/**
 * Your TreeAncestor object will be instantiated and called as such:
 * TreeAncestor obj = new TreeAncestor(n, parent);
 * int param_1 = obj.getKthAncestor(node,k);
 */
